%% A) Create set of constraints for D-stability LMIs with free pole allocation

    %A.1) Numerically positive definite matrix "X" (eps ≈ 0)

    set_LMIs_classic = X>=eps*eye(n_x);

    %A.2) LMI for "Re(s) ≤ -alpha_v" (Vertical Strip Region)
    
    if ~isempty(alpha_v)
        Ax_Valpha = A_x+alpha_v*eye(n_x);
        set_LMIs_classic =...
            [ set_LMIs_classic, Ax_Valpha*X+X*Ax_Valpha'+...
                 B_u*W+W'*B_u'<=-eps*eye(n_x)  ];
    end

    %A.3) LMI for "Re(s) ≥ -beta_v" (Vertical Strip Region)

    
    if ~isempty(beta_v)
        Ax_Vbeta = -A_x-beta_v*eye(n_x);
        set_LMIs_classic = ...
            [ set_LMIs_classic, Ax_Vbeta*X+X*Ax_Vbeta'-...
                 B_u*W-W'*B_u'<=-eps*eye(n_x) ];
    end

    %A.4) LMI for "abs(s) ≤ r_d" (Disk Region Centered at the Origin)

    
    if ~isempty(r_d)
        Ax_Dqr = A_x+q_d*eye(n_x); 
        set_LMIs_classic = [ set_LMIs_classic,...
                [ -r_d*X, Ax_Dqr*X+B_u*W;...
                  X*Ax_Dqr'+W'*B_u', -r_d*X ]...
                  <=-eps*eye(2*n_x)    ];
    end

    %A.5) LMI for "-w_H ≤ Imag(s) ≤ w_H" (Horizontal Strip Region)
    
    if ~isempty(w_H)
        set_LMIs_classic =[ set_LMIs_classic,...
                [ -w_H*X,...
                  X*A_x'-A_x*X+...
                  W'*B_u'-B_u*W;...
                  A_x*X-X*A_x'+...
                  B_u*W-W'*B_u',...
                  -w_H*X...
                ]<=-eps*eye(2*n_x) ];
    end

    %A.6) LMI for "-theta_s ≤ angle(s) ≤ theta_s" (Sector Region)
    
    if ~isempty(theta_s)
        Ax_sin = A_x*sin(theta_s);
        Ax_cos = A_x*cos(theta_s);
        Bu_sin = B_u*sin(theta_s);
        Bu_cos = B_u*cos(theta_s);
        
        set_LMIs_classic =[ set_LMIs_classic,...
                [ Ax_sin*X+X*Ax_sin'+...
                  Bu_sin*W+W'*Bu_sin',...
                  Ax_cos*X-X*Ax_cos'+...
                  Bu_cos*W-W'*Bu_cos';...
                  X*Ax_cos'-Ax_cos*X+...
                  W'*Bu_cos'-Bu_cos*W,...
                  Ax_sin*X+X*Ax_sin'+...
                  Bu_sin*W+W'*Bu_sin'...
                ]<=-eps*eye(2*n_x) ];
    end
    
    %% B) LMI for Classical H_2 Optimal Control

if ~isempty(c_H2)

    set_LMIs_classic = [ set_LMIs_classic, A_x*X+X*A_x'+...
             B_u*W+W'*B_u'+...
             B_d*B_d'<=-eps*eye(n_x) ];
         
    set_LMIs_classic = [ set_LMIs_classic,...
                Z>=eps*eye(n_y),...
                trace(Z)<=rho,...
                rho>=eps ];
            
    set_LMIs_classic = [set_LMIs_classic,...
        [ -Z, C_y*X+D_y*W; X'*C_y'+W'*D_y', -X ]<=...
            -eps*eye(n_y+n_x,n_y+n_x) ];        
end

%% C) LMIs for Classical H-inf Control 

if ~isempty(c_Hinf)

    set_LMIs_classic = [ set_LMIs_classic,...
                gamma>=eps,...
                [   A_x*X+X*A_x'+B_u*W+W'*B_u',...
                    B_d, X*C_z'+W'*D_y';...
                    B_d', -gamma*eye(n_d), E_z';...
                    C_z*X+D_z*W,...
                    E_z, -gamma*eye(n_z)...
                ]<=-eps*eye(n_x+n_d+n_z)...
            ];
end
